{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#YouTube: https://youtu.be/XQAVLy2J7ic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "\n",
    "def gameoflife(s, p, t):\n",
    "    '''This function simulates game of life and visualizes it'''\n",
    "    \n",
    "    board = conway(s, p)\n",
    "    arr = advance(board, t)\n",
    "    plot(s, t, arr)\n",
    "\n",
    "\n",
    "def conway(s, p=0.1): # s-->size, p-->probability\n",
    "        '''This function creats a board which is a square two dimentional numpy array'''\n",
    "        \n",
    "        #creates arrays with random floats over the interval [0,1)\n",
    "        board = (np.random.random((s, s))>(1-p)).astype(int) \n",
    "        return board\n",
    "\n",
    "\n",
    "\n",
    "def advance(b, t): #b-->board, t-->t times\n",
    "        '''This function simulates the advance process of game of life'''\n",
    "        arr = [[] for _ in range(t+1)]\n",
    "        arr[0].append(b.copy())\n",
    "\n",
    "        j = 1\n",
    "        \n",
    "        while t>0:\n",
    "\n",
    "                rows = len(b)\n",
    "                cols = len(b[0])\n",
    "\n",
    "                #iterate cell by cell\n",
    "                for r in range(rows): \n",
    "                        for c in range(cols): \n",
    "\n",
    "                                # the original cell is live\n",
    "                                if b[r][c] == 1:\n",
    "                                        live_n = count(b, r, c)  \n",
    "                                        if (live_n < 2) or (live_n > 3):\n",
    "                                                b[r][c] = -1 # dead\n",
    "                                        else: pass\n",
    "                                \n",
    "                                # the original cell is dead\n",
    "                                if b[r][c] == 0:\n",
    "                                        live_n = count(b, r, c)  \n",
    "                                        if live_n == 3:\n",
    "                                                b[r][c] = 2 # live\n",
    "\n",
    "                b = update(b)\n",
    "                arr[j].append(b.copy())\n",
    "\n",
    "                j += 1\n",
    "                t -= 1\n",
    "        \n",
    "        return arr\n",
    "        \n",
    "\n",
    "def plot(s,t,arr):\n",
    "    '''This function plots the advance process of game of life'''\n",
    "    fig=plt.figure(figsize=(8, 8)) #create a fig\n",
    "\n",
    "    for i in range(t+1): \n",
    "    \n",
    "        img = arr[i][0]\n",
    "        fig.add_subplot(1,(t+1),(i+1))\n",
    "        plt.imshow(img, cmap='binary')\n",
    "        \n",
    "        \n",
    "def count(b, r, c):\n",
    "        '''This fucntion counts the number of live neighboring cells for a cell'''\n",
    "        #creat a list for iterating neighbors later\n",
    "        neighbors = [(1,0), (1,-1), (0,-1), (-1,-1), (-1,0), (-1,1), (0,1), (1,1)]\n",
    "\n",
    "        #set the initial number of live neigboring cells is 0\n",
    "        live_neighbors = 0\n",
    "\n",
    "        for neighbor in neighbors:\n",
    "                n_r = r + neighbor[0]\n",
    "                n_c = c + neighbor[1]\n",
    "\n",
    "                if ((n_r >= 0) and (n_r < len(b)) and (n_c >= 0) and (n_c < len(b[0]))) and ((abs(b[n_r][n_c]) == 1)):\n",
    "                     live_neighbors += 1\n",
    "\n",
    "        return live_neighbors\n",
    "\n",
    "\n",
    "def update(b):\n",
    "        '''This function updates the board'''\n",
    "        rows = len(b)\n",
    "        cols = len(b[0])\n",
    "        \n",
    "        #iterate cell by cell\n",
    "        for r in range(rows): \n",
    "                for c in range(cols): \n",
    "                        if b[r][c] == -1: \n",
    "                                b[r][c] = 0\n",
    "                        elif b[r][c] == 2:\n",
    "                                b[r][c] = 1\n",
    "\n",
    "        return b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdoAAABfCAYAAABP7gZwAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAH/0lEQVR4nO3dv4tkZRbG8efo0Mlg1qOwKjsKJibC3GGShYVNxI1MTUwn8g/YP8F0U1kMxWzAQPyRLZtZBTusggvj0ItDB3ZnsskwcjboanbGvvete67vuW9V3e8HLj3V1q3z3qfeqmNV3x/m7gIAADmeaz0AAAAOGY0WAIBENFoAABLRaAEASESjBQAgEY0WAIBE18bcyczekfRXSc9L+pu7f7jl/r3HDHVdN7jOer3u/X3NdYbuXzKlvqQ/K5DX8fGx37x5Mzy24JgGlbZxDuv1+lzS+2qU2b45OTnR+fm5RV6XS85LYo5FMcfi1uv1ubvf6P2P7l5cdBHwD5Jel3Qk6b6kN7es431LyRzrDN2/tEypH82r67pinYja2zgHSauWme2brus8+rpccl7uzLEo5licpJUPZDPmq+M7kh64+0N3fyzpU0nvjlhvycgr5rrILIrXZQxzLI45VsmYRvuypB+fuv1o87tnmNldM1uZ2arW4PZYKK+zs7P5RrabjkRmUVtfl+T1DOZYHHOskjGN1np+d+VvsO7+kbvfdvfbv31YB6eY140b/V/rLxyZlW19XZLXVsyxMuZYJWMa7SNJrz51+xVJpznDORjkFfNYZBbF6zKGORbHHKtkTKP9RtIbZvaamR1Jek/SZ6UVuq4b2klq0NAfkc1scImuM0W0/q1btxTNq6ahTEpLTaW8Cv6rhpntqfDrcuGYY3HMsUq2Ht7j7k/M7ANJX+piL7SP3f279JHtqU1DIa84MgvgdTkJeQUwx+oZdRytu38u6fPksRwM8oojszgyiyGvODKrgzNDAQCQiEYLAEAiGi0AAIlotAAAJBq1M1QtUw+xqaX2oSy1rNfrcDa7ui1zIbMY8oojszpKGS4lLz7RAgCQiEYLAEAiGi0AAIlotAAAJKLRAgCQKGWv45p765Uep+ZezEOP1XKvuLlq19z2pexFiMPXdZ1Wq9jltXfxfaS10rYvJS8+0QIAkIhGCwBAIhotAACJaLQAACSi0QIAkIhGCwBAopRG23Wd3P3KUmJmvUvf42xb9s2UvGqakuPQ8zWXocxaz4uhXLYdptY6z13UOpPLwxQjy6G8J9VEXnyiBQAgFY0WAIBENFoAABLRaAEASESjBQAg0aiLCpjZiaSfJf0i6Ym73y7df+iiAlNOLr1lXOF1atqyJ+mJRmY2Ja99VCuvqTXmyHPO5yyS2ZQT5B+a6BwjszqvSy4qELt6z5/c/TxtJIeJzGLIK47MYsgrjsx+I746BgAg0dhG65K+MrO1md3tu4OZ3TWzlZkt+7uW/ytmRl5XhObY2dnZzMPbSaPnGHlJYo5NwRyrYeQZdX63+fmipPuS/rjl/t63lNRcp3X9aGZTardW+flaRedY13XRGjU3v6romDfbHppjQ3ntsprPY805tgRzzbF9e62WSFr5QDajPtG6++nm50+S7km6M2a9JSOzGPKKI7MY8oojszq2Nlozu25mL1z+W9Lbkr4trTN0Htp9PKfrxHPXhjKbklfrHIf+z23iOs9F59ghGcqllGd0jk05b29rU+ZYQXiOTclsV7OcotYcw7i9jl+SdG8T2DVJn7j7F6mj2n9kFnNN0j/IK4Q5FsMci2OOVbK10br7Q0lvzTCWg0FmYY994nGzS8UcC2OOBTHH6uHwHgAAEtFoAQBIRKMFACARjRYAgESzNtrSYQyVd+XvVdr9fo76Ua3zOjSHdOhF1NAhZCVLzgtxU+bY0PvYoR0qxSdaAAAS0WgBAEhEowUAIBGNFgCARDRaAAASjTnXcdjlyaV/bctJ0sN1hh5vX/dMixjaxqXveVx7jh26pc+Xkq7rtFpdvVx0aR5NeU86lOdg6H2/ZGjbDyWTS3yiBQAgEY0WAIBENFoAABLRaAEASESjBQAgEY0WAIBEKY225smlS/bpAgFzKZ2MO3qS7trr7OpJwnd5bC3t43M5hykX9VjChUCG3veXsO3b8IkWAIBENFoAABLRaAEASESjBQAgEY0WAIBElrHnl5mdSfrP5uaxpPPqRcabu/7v3f1GZIWF5yWRWRR5xZFZDHnFDWaW0mifKWC2cvfbqUV2uH5U6/G2rj9F6zG3rh/Veryt60/Resyt60e1Hm/r+r/GV8cAACSi0QIAkGiORvvRDDV2uX5U6/G2rj9F6zG3rh/Veryt60/Resyt60e1Hm/r+s9I/xstAABLxlfHAAAkotECAJAordGa2Ttm9m8ze2Bmf8mqU6h/Ymb/MrN/mtlq7vpTkFkMecWRWQx5xZFZj+hljUZe+uh5ST9Iel3SkaT7kt7MqFUYw4mk4zlrkhl57fJCZuRFZm2WrE+0dyQ9cPeH7v5Y0qeS3k2qdSjILIa84sgshrziyKxHVqN9WdKPT91+tPndnFzSV2a2NrO7M9eegsxiyCuOzGLIK47MelxLelzr+d3cxxH9wd1PzexFSV+b2ffu/veZxxBBZjHkFUdmMeQVR2Y9sj7RPpL06lO3X5F0mlSrl7ufbn7+JOmeLr7S2GVkFkNecWQWQ15xZNYjq9F+I+kNM3vNzI4kvSfps6RaV5jZdTN74fLfkt6W9O1c9ScisxjyiiOzGPKKI7MeKV8du/sTM/tA0pe62AvtY3f/LqPWgJck3TMz6WIbP3H3L2asH0ZmMeQVR2Yx5BVHZv04BSMAAIk4MxQAAIlotAAAJKLRAgCQiEYLAEAiGi0AAIlotAAAJKLRAgCQ6H/eXOaaQTxYWgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gameoflife(10, 0.5, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gameoflife(20, 0.1, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gameoflife(25, 0.9, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
